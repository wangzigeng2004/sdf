module statix/pp/statix/lang/Core-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libstratego-sglr
  statix/signatures/statix/lang/Core-sig


imports
  statix/signatures/statix/lang/Common-sig


imports
  statix/pp/statix/lang/Common-pp


strategies
  prettyprint-example =
    prettyprint-Statix

  prettyprint-Statix =
    fail

  prettyprint-Statix(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Statix-start-symbols

  prettyprint-Statix-start-symbols =
    fail


strategies
  prettyprint-Statix =
    prettyprint-Statix-Module

  prettyprint-Statix =
    prettyprint-Statix-Import

  prettyprint-Statix =
    prettyprint-Statix-Section

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Module>
    where <?"Module"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Import>
    where <?"Import"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Section>
    where <?"Section"> sort

  prettyprint-Statix-Module :
    Module(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("module "), t1__']
                            )
                          , H(
                              []
                            , [S("")]
                            )
                          , H(
                              [SOpt(HS(), "0")]
                            , [t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ModuleId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-V-list(prettyprint-Statix-Section|"1")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Module =
    ?Module(_, _)

  Statix-get-indent :
    (t@Module(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Module"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Module(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Module"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := "\n\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Module(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Module"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := "\n\n"
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Section :
    Imports(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("imports")]
                       )
                     , t1__'
                     ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-Import) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Section =
    ?Imports(_)

  Statix-get-indent :
    (t@Imports(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Imports(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Imports(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Import :
    Import(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ModuleId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Import =
    ?Import(_)

  Statix-get-indent :
    (t@Import(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Import"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Import(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Import"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Import(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Import"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Section :
    Signature(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("signature")]
                         )
                       , H(
                           []
                         , [S("")]
                         )
                       , t1__'
                       ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-Signature|"1")
                                       <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Section =
    ?Signature(_)

  Statix-get-indent :
    (t@Signature(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Signature(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             separator := "\n\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Signature(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             ws := "\n\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Section :
    Rules(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("rules")]
                     )
                   , H(
                       []
                     , [S("")]
                     )
                   , t1__'
                   ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-Rule|"1")
                                       <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Section =
    ?Rules(_)

  Statix-get-indent :
    (t@Rules(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Rules(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             separator := "\n\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Rules(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Section"> sort
    with switch !index
           case ?1 :
             ws := "\n\n  "
           otherwise :
             ws := ""
         end

  is-Statix-Module =
    fail

  is-Statix-Import =
    fail

  is-Statix-Section =
    fail

  prettyprint-Statix-Module :
    amb([h|hs]) -> <prettyprint-Statix-Module> h

  prettyprint-Statix-Import :
    amb([h|hs]) -> <prettyprint-Statix-Import> h

  prettyprint-Statix-Section :
    amb([h|hs]) -> <prettyprint-Statix-Section> h

  prettyprint-Statix-Module :
    Module-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Module")]
                        )
                      ]

  is-Statix-Module =
    ?Module-Plhdr()

  prettyprint-Statix-Import :
    Import-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Import")]
                        )
                      ]

  is-Statix-Import =
    ?Import-Plhdr()

  prettyprint-Statix-ModuleId :
    ModuleId-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$ModuleId")]
                          )
                        ]

  is-Statix-ModuleId =
    ?ModuleId-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Signature")]
                           )
                         ]

  is-Statix-Signature =
    ?Signature-Plhdr()

  prettyprint-Statix-Section :
    Section-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Section")]
                         )
                       ]

  is-Statix-Section =
    ?Section-Plhdr()

  prettyprint-Statix-Rule :
    Rule-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Rule")]
                      )
                    ]

  is-Statix-Rule =
    ?Rule-Plhdr()

  prettyprint-Statix-Module :
    Module-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Module")]
                         )
                       ]

  is-Statix-Module =
    ?Module-Plhdr(_)

  prettyprint-Statix-Import :
    Import-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Import")]
                         )
                       ]

  is-Statix-Import =
    ?Import-Plhdr(_)

  prettyprint-Statix-ModuleId :
    ModuleId-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$ModuleId")]
                           )
                         ]

  is-Statix-ModuleId =
    ?ModuleId-Plhdr(_)

  prettyprint-Statix-Signature :
    Signature-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Signature")]
                            )
                          ]

  is-Statix-Signature =
    ?Signature-Plhdr(_)

  prettyprint-Statix-Section :
    Section-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Section")]
                          )
                        ]

  is-Statix-Section =
    ?Section-Plhdr(_)

  prettyprint-Statix-Rule :
    Rule-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Rule")]
                       )
                     ]

  is-Statix-Rule =
    ?Rule-Plhdr(_)

  prettyprint-Statix-Section :
    Section-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-Statix-Section =
    ?Section-Opt-Plhdr()

  prettyprint-Statix-Import :
    Import-Opt-Plhdr() -> [ H(
                              []
                            , [S("")]
                            )
                          ]

  is-Statix-Import =
    ?Import-Opt-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-Statix-Signature =
    ?Signature-Opt-Plhdr()

  prettyprint-Statix-Rule :
    Rule-Opt-Plhdr() -> [ H(
                            []
                          , [S("")]
                          )
                        ]

  is-Statix-Rule =
    ?Rule-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-Signature

  prettyprint-Statix =
    prettyprint-Statix-CDecl

  prettyprint-Statix =
    prettyprint-Statix-CInd

  prettyprint-Statix =
    prettyprint-Statix-Rule

  prettyprint-Statix =
    prettyprint-Statix-RuleName

  prettyprint-Statix =
    prettyprint-Statix-RuleHead

  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix =
    prettyprint-Statix-HoConstraint

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Signature>
    where <?"Signature"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-CDecl>
    where <?"CDecl"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-CInd>
    where <?"CInd"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Rule>
    where <?"Rule"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-RuleName>
    where <?"RuleName"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-RuleHead>
    where <?"RuleHead"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-HoConstraint>
    where <?"HoConstraint"> sort

  prettyprint-Statix-Signature :
    Constraints(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("constraints")]
                           )
                         , t1__'
                         ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-CDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?Constraints(_)

  Statix-get-indent :
    (t@Constraints(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Constraints(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Constraints(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-CDecl :
    CDecl(t1__, t2__, t3__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__', t2__', S(" : "), t3__']
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-Statix-CInd) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ConstraintId) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Type) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-CDecl =
    ?CDecl(_, _, _)

  Statix-get-indent :
    ( t@CDecl(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"CDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CDecl(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"CDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CDecl(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"CDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-CInd :
    InductiveC() -> [ H(
                        []
                      , [S("")]
                      )
                    ]

  is-Statix-CInd =
    ?InductiveC()

  Statix-get-indent :
    (t@InductiveC(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@InductiveC(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@InductiveC(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-CInd :
    CoinductiveC() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("coinductive ")]
                        )
                      ]

  is-Statix-CInd =
    ?CoinductiveC()

  Statix-get-indent :
    (t@CoinductiveC(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CoinductiveC(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CoinductiveC(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"CInd"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Rule :
    Rule(t1__, t2__, t3__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', t2__', S(" :-")]
                                )
                              , t3__'
                              ]
    with t1__' := <pp-one-Z(prettyprint-Statix-RuleName) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-RuleHead) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-indent(|"2")> [ <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t3__
                                    , S(".")
                                    ]

  is-Statix-Rule =
    ?Rule(_, _, _)

  Statix-get-indent :
    ( t@Rule(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Rule"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@Rule(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Rule"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@Rule(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Rule"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-RuleName :
    NoName() -> [ H(
                    []
                  , [S("")]
                  )
                ]

  is-Statix-RuleName =
    ?NoName()

  Statix-get-indent :
    (t@NoName(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoName(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoName(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-RuleName :
    Name(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-STRID) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-RuleName =
    ?Name(_)

  Statix-get-indent :
    (t@Name(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Name(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Name(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"RuleName"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-RuleHead :
    C(t1__, t2__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ t1__'
                         , S("(")
                         , t2__'
                         , S(")")
                         ]
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ConstraintId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-RuleHead =
    ?C(_, _)

  Statix-get-indent :
    (t@C(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"RuleHead"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@C(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"RuleHead"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ", "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@C(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"RuleHead"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    C(t1__, t2__, t3__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ t1__'
                               , S("(")
                               , t2__'
                               , S(")")
                               , t3__'
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ConstraintId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Constraint =
    ?C(_, _, _)

  Statix-get-indent :
    ( t@C(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@C(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ", "
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@C(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-HoConstraint :
    LLam(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("{ ")
                            , t1__'
                            , S(" :- ")
                            , t2__'
                            , S(" }")
                            ]
                          )
                        ]
    with t1__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-HoConstraint =
    ?LLam(_, _)

  Statix-get-indent :
    (t@LLam(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"HoConstraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@LLam(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"HoConstraint"> sort
    with switch !index
           case ?1 :
             separator := ", "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@LLam(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"HoConstraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Statix-Signature =
    fail

  is-Statix-CDecl =
    fail

  is-Statix-CInd =
    fail

  is-Statix-Rule =
    fail

  is-Statix-RuleName =
    fail

  is-Statix-RuleHead =
    fail

  is-Statix-Constraint =
    fail

  is-Statix-HoConstraint =
    fail

  prettyprint-Statix-Signature :
    amb([h|hs]) -> <prettyprint-Statix-Signature> h

  prettyprint-Statix-CDecl :
    amb([h|hs]) -> <prettyprint-Statix-CDecl> h

  prettyprint-Statix-CInd :
    amb([h|hs]) -> <prettyprint-Statix-CInd> h

  prettyprint-Statix-Rule :
    amb([h|hs]) -> <prettyprint-Statix-Rule> h

  prettyprint-Statix-RuleName :
    amb([h|hs]) -> <prettyprint-Statix-RuleName> h

  prettyprint-Statix-RuleHead :
    amb([h|hs]) -> <prettyprint-Statix-RuleHead> h

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h

  prettyprint-Statix-HoConstraint :
    amb([h|hs]) -> <prettyprint-Statix-HoConstraint> h

  prettyprint-Statix-Signature :
    Signature-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Signature")]
                           )
                         ]

  is-Statix-Signature =
    ?Signature-Plhdr()

  prettyprint-Statix-CDecl :
    CDecl-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$CDecl")]
                       )
                     ]

  is-Statix-CDecl =
    ?CDecl-Plhdr()

  prettyprint-Statix-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Type")]
                      )
                    ]

  is-Statix-Type =
    ?Type-Plhdr()

  prettyprint-Statix-CInd :
    CInd-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$CInd")]
                      )
                    ]

  is-Statix-CInd =
    ?CInd-Plhdr()

  prettyprint-Statix-Rule :
    Rule-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Rule")]
                      )
                    ]

  is-Statix-Rule =
    ?Rule-Plhdr()

  prettyprint-Statix-RuleName :
    RuleName-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$RuleName")]
                          )
                        ]

  is-Statix-RuleName =
    ?RuleName-Plhdr()

  prettyprint-Statix-STRID :
    STRID-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$STRID")]
                       )
                     ]

  is-Statix-STRID =
    ?STRID-Plhdr()

  prettyprint-Statix-RuleHead :
    RuleHead-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$RuleHead")]
                          )
                        ]

  is-Statix-RuleHead =
    ?RuleHead-Plhdr()

  prettyprint-Statix-ConstraintId :
    ConstraintId-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$ConstraintId")]
                              )
                            ]

  is-Statix-ConstraintId =
    ?ConstraintId-Plhdr()

  prettyprint-Statix-Message :
    Message-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Message")]
                         )
                       ]

  is-Statix-Message =
    ?Message-Plhdr()

  prettyprint-Statix-HoConstraint :
    HoConstraint-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$HoConstraint")]
                              )
                            ]

  is-Statix-HoConstraint =
    ?HoConstraint-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-Constraint :
    Constraint-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Constraint")]
                            )
                          ]

  is-Statix-Constraint =
    ?Constraint-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Signature")]
                            )
                          ]

  is-Statix-Signature =
    ?Signature-Plhdr(_)

  prettyprint-Statix-CDecl :
    CDecl-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$CDecl")]
                        )
                      ]

  is-Statix-CDecl =
    ?CDecl-Plhdr(_)

  prettyprint-Statix-Type :
    Type-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Type")]
                       )
                     ]

  is-Statix-Type =
    ?Type-Plhdr(_)

  prettyprint-Statix-CInd :
    CInd-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$CInd")]
                       )
                     ]

  is-Statix-CInd =
    ?CInd-Plhdr(_)

  prettyprint-Statix-Rule :
    Rule-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Rule")]
                       )
                     ]

  is-Statix-Rule =
    ?Rule-Plhdr(_)

  prettyprint-Statix-RuleName :
    RuleName-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$RuleName")]
                           )
                         ]

  is-Statix-RuleName =
    ?RuleName-Plhdr(_)

  prettyprint-Statix-STRID :
    STRID-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$STRID")]
                        )
                      ]

  is-Statix-STRID =
    ?STRID-Plhdr(_)

  prettyprint-Statix-RuleHead :
    RuleHead-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$RuleHead")]
                           )
                         ]

  is-Statix-RuleHead =
    ?RuleHead-Plhdr(_)

  prettyprint-Statix-ConstraintId :
    ConstraintId-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$ConstraintId")]
                               )
                             ]

  is-Statix-ConstraintId =
    ?ConstraintId-Plhdr(_)

  prettyprint-Statix-Message :
    Message-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Message")]
                          )
                        ]

  is-Statix-Message =
    ?Message-Plhdr(_)

  prettyprint-Statix-HoConstraint :
    HoConstraint-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$HoConstraint")]
                               )
                             ]

  is-Statix-HoConstraint =
    ?HoConstraint-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-Constraint :
    Constraint-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Constraint")]
                             )
                           ]

  is-Statix-Constraint =
    ?Constraint-Plhdr(_)

  prettyprint-Statix-CDecl :
    CDecl-Opt-Plhdr() -> [ H(
                             []
                           , [S("")]
                           )
                         ]

  is-Statix-CDecl =
    ?CDecl-Opt-Plhdr()

  prettyprint-Statix-CInd :
    CInd-Opt-Plhdr() -> [ H(
                            []
                          , [S("")]
                          )
                        ]

  is-Statix-CInd =
    ?CInd-Opt-Plhdr()

  prettyprint-Statix-RuleName :
    RuleName-Opt-Plhdr() -> [ H(
                                []
                              , [S("")]
                              )
                            ]

  is-Statix-RuleName =
    ?RuleName-Opt-Plhdr()

  prettyprint-Statix-Term :
    Term-Opt-Plhdr() -> [ H(
                            []
                          , [S("")]
                          )
                        ]

  is-Statix-Term =
    ?Term-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-ConstraintId

  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-ConstraintId>
    where <?"ConstraintId"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-ConstraintId =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-ConstraintId :
    amb([h|hs]) -> <prettyprint-Statix-ConstraintId> h

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix-Constraint :
    CTrue() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("true")]
                 )
               ]

  is-Statix-Constraint =
    ?CTrue()

  Statix-get-indent :
    (t@CTrue(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CTrue(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CTrue(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CFalse(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("false"), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Constraint =
    ?CFalse(_)

  Statix-get-indent :
    (t@CFalse(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CFalse(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CFalse(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Constraint :
    CConj(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(",")]
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Constraint =
    ?CConj(_, _)

  Statix-get-indent :
    (t@CConj(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CConj(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CConj(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n"
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CNew(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("new "), t1__']
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Statix-Var|" ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Constraint =
    ?CNew(_)

  Statix-get-indent :
    (t@CNew(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CNew(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := " "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CNew(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CEqual(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__', S(" == "), t2__', t3__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Constraint =
    ?CEqual(_, _, _)

  Statix-get-indent :
    ( t@CEqual(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CEqual(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CEqual(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CInequal(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" != "), t2__', t3__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Constraint =
    ?CInequal(_, _, _)

  Statix-get-indent :
    ( t@CInequal(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CInequal(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CInequal(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CTry(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("try { ")
                            , t1__'
                            , S(" }")
                            , t2__'
                            ]
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Constraint =
    ?CTry(_, _)

  Statix-get-indent :
    (t@CTry(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CTry(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CTry(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CExists(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("{")
                               , t1__'
                               , S("}")
                               ]
                             )
                           , t2__'
                           ]
    with t1__' := <pp-H-list(prettyprint-Statix-Var|" ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-indent(|"2")> [ <pp-one-Z(prettyprint-Statix-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                    ]

  is-Statix-Constraint =
    ?CExists(_, _)

  Statix-get-indent :
    (t@CExists(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CExists(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := " "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CExists(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  is-Statix-Constraint =
    fail

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-Message :
    Message-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Message")]
                         )
                       ]

  is-Statix-Message =
    ?Message-Plhdr()

  prettyprint-Statix-Var :
    Var-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Var")]
                     )
                   ]

  is-Statix-Var =
    ?Var-Plhdr()

  prettyprint-Statix-Constraint :
    Constraint-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Constraint")]
                            )
                          ]

  is-Statix-Constraint =
    ?Constraint-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-Message :
    Message-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Message")]
                          )
                        ]

  is-Statix-Message =
    ?Message-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Var")]
                      )
                    ]

  is-Statix-Var =
    ?Var-Plhdr(_)

  prettyprint-Statix-Constraint :
    Constraint-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Constraint")]
                             )
                           ]

  is-Statix-Constraint =
    ?Constraint-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Opt-Plhdr() -> [ H(
                           []
                         , [S("")]
                         )
                       ]

  is-Statix-Var =
    ?Var-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix =
    prettyprint-Statix-AstProperty

  prettyprint-Statix =
    prettyprint-Statix-AstPropertyOp

  prettyprint-Statix =
    prettyprint-Statix-TermOrId

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-AstProperty>
    where <?"AstProperty"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-AstPropertyOp>
    where <?"AstPropertyOp"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-TermOrId>
    where <?"TermOrId"> sort

  prettyprint-Statix-Constraint :
    CAstId(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("astId(")
                              , t1__'
                              , S(", ")
                              , t2__'
                              , S(")")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Constraint =
    ?CAstId(_, _)

  Statix-get-indent :
    (t@CAstId(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@CAstId(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@CAstId(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CAstProperty(t1__, t2__, t3__, t4__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ S("@")
                                                , t1__'
                                                , S(".")
                                                , t2__'
                                                , S(" ")
                                                , t3__'
                                                , S(" ")
                                                , t4__'
                                                ]
                                              )
                                            ]
    with t1__' := <pp-one-Z(prettyprint-Statix-TermOrId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-AstProperty) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-AstPropertyOp) <+ pp-one-Z(prettyprint-completion-aux)> t3__
    with t4__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t4__

  is-Statix-Constraint =
    ?CAstProperty(_, _, _, _)

  Statix-get-indent :
    ( t@CAstProperty(t1__, t2__, t3__, t4__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CAstProperty(t1__, t2__, t3__, t4__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CAstProperty(t1__, t2__, t3__, t4__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-AstProperty :
    Prop(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-AstPropertyId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-AstProperty =
    ?Prop(_)

  Statix-get-indent :
    (t@Prop(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"AstProperty"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Prop(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"AstProperty"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Prop(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"AstProperty"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-AstPropertyOp :
    Set() -> [ H(
                 [SOpt(HS(), "0")]
               , [S(":=")]
               )
             ]

  is-Statix-AstPropertyOp =
    ?Set()

  Statix-get-indent :
    (t@Set(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Set(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Set(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-AstPropertyOp :
    Add() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("+=")]
               )
             ]

  is-Statix-AstPropertyOp =
    ?Add()

  Statix-get-indent :
    (t@Add(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Add(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Add(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"AstPropertyOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-TermOrId :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-TermOrId)
    where t1__' := <pp-one-Z(prettyprint-Statix-Var) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Constraint =
    fail

  is-Statix-AstProperty =
    fail

  is-Statix-AstPropertyOp =
    fail

  is-Statix-TermOrId =
    fail

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h

  prettyprint-Statix-AstProperty :
    amb([h|hs]) -> <prettyprint-Statix-AstProperty> h

  prettyprint-Statix-AstPropertyOp :
    amb([h|hs]) -> <prettyprint-Statix-AstPropertyOp> h

  prettyprint-Statix-TermOrId :
    amb([h|hs]) -> <prettyprint-Statix-TermOrId> h

  prettyprint-Statix-Constraint :
    Constraint-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Constraint")]
                            )
                          ]

  is-Statix-Constraint =
    ?Constraint-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-AstProperty :
    AstProperty-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$AstProperty")]
                             )
                           ]

  is-Statix-AstProperty =
    ?AstProperty-Plhdr()

  prettyprint-Statix-AstPropertyId :
    AstPropertyId-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$AstPropertyId")]
                               )
                             ]

  is-Statix-AstPropertyId =
    ?AstPropertyId-Plhdr()

  prettyprint-Statix-AstPropertyOp :
    AstPropertyOp-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$AstPropertyOp")]
                               )
                             ]

  is-Statix-AstPropertyOp =
    ?AstPropertyOp-Plhdr()

  prettyprint-Statix-TermOrId :
    TermOrId-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$TermOrId")]
                          )
                        ]

  is-Statix-TermOrId =
    ?TermOrId-Plhdr()

  prettyprint-Statix-Var :
    Var-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Var")]
                     )
                   ]

  is-Statix-Var =
    ?Var-Plhdr()

  prettyprint-Statix-Constraint :
    Constraint-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Constraint")]
                             )
                           ]

  is-Statix-Constraint =
    ?Constraint-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-AstProperty :
    AstProperty-Plhdr(_) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$AstProperty")]
                              )
                            ]

  is-Statix-AstProperty =
    ?AstProperty-Plhdr(_)

  prettyprint-Statix-AstPropertyId :
    AstPropertyId-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$AstPropertyId")]
                                )
                              ]

  is-Statix-AstPropertyId =
    ?AstPropertyId-Plhdr(_)

  prettyprint-Statix-AstPropertyOp :
    AstPropertyOp-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$AstPropertyOp")]
                                )
                              ]

  is-Statix-AstPropertyOp =
    ?AstPropertyOp-Plhdr(_)

  prettyprint-Statix-TermOrId :
    TermOrId-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$TermOrId")]
                           )
                         ]

  is-Statix-TermOrId =
    ?TermOrId-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Var")]
                      )
                    ]

  is-Statix-Var =
    ?Var-Plhdr(_)


strategies
  prettyprint-Statix =
    prettyprint-Statix-AstPropertyId

  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-AstPropertyId>
    where <?"AstPropertyId"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-AstPropertyId =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-AstPropertyId :
    amb([h|hs]) -> <prettyprint-Statix-AstPropertyId> h

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Signature

  prettyprint-Statix =
    prettyprint-Statix-RelDecl

  prettyprint-Statix =
    prettyprint-Statix-RelRef

  prettyprint-Statix =
    prettyprint-Statix-Rule

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Signature>
    where <?"Signature"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-RelDecl>
    where <?"RelDecl"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-RelRef>
    where <?"RelRef"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Rule>
    where <?"Rule"> sort

  prettyprint-Statix-Signature :
    Relations(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("relations")]
                         )
                       , t1__'
                       ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-RelDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?Relations(_)

  Statix-get-indent :
    (t@Relations(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Relations(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Relations(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-RelDecl :
    RelDecl(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" : "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Label) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Type) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-RelDecl =
    ?RelDecl(_, _)

  Statix-get-indent :
    (t@RelDecl(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"RelDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@RelDecl(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"RelDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@RelDecl(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"RelDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-RelRef :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-RelRef)
    where t1__' := <pp-one-Z(prettyprint-Statix-Label) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Rule :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S("relation "), t1__']
              )
            ]
    where not(is-Statix-Rule)
    where t1__' := <pp-one-Z(prettyprint-Statix-RelDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Signature =
    fail

  is-Statix-RelDecl =
    fail

  is-Statix-RelRef =
    fail

  is-Statix-Rule =
    fail

  prettyprint-Statix-Signature :
    amb([h|hs]) -> <prettyprint-Statix-Signature> h

  prettyprint-Statix-RelDecl :
    amb([h|hs]) -> <prettyprint-Statix-RelDecl> h

  prettyprint-Statix-RelRef :
    amb([h|hs]) -> <prettyprint-Statix-RelRef> h

  prettyprint-Statix-Rule :
    amb([h|hs]) -> <prettyprint-Statix-Rule> h

  prettyprint-Statix-Signature :
    Signature-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Signature")]
                           )
                         ]

  is-Statix-Signature =
    ?Signature-Plhdr()

  prettyprint-Statix-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Type")]
                      )
                    ]

  is-Statix-Type =
    ?Type-Plhdr()

  prettyprint-Statix-RelRef :
    RelRef-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$RelRef")]
                        )
                      ]

  is-Statix-RelRef =
    ?RelRef-Plhdr()

  prettyprint-Statix-Label :
    Label-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Label")]
                       )
                     ]

  is-Statix-Label =
    ?Label-Plhdr()

  prettyprint-Statix-Rule :
    Rule-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Rule")]
                      )
                    ]

  is-Statix-Rule =
    ?Rule-Plhdr()

  prettyprint-Statix-RelDecl :
    RelDecl-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$RelDecl")]
                         )
                       ]

  is-Statix-RelDecl =
    ?RelDecl-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Signature")]
                            )
                          ]

  is-Statix-Signature =
    ?Signature-Plhdr(_)

  prettyprint-Statix-Type :
    Type-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Type")]
                       )
                     ]

  is-Statix-Type =
    ?Type-Plhdr(_)

  prettyprint-Statix-RelRef :
    RelRef-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$RelRef")]
                         )
                       ]

  is-Statix-RelRef =
    ?RelRef-Plhdr(_)

  prettyprint-Statix-Label :
    Label-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Label")]
                        )
                      ]

  is-Statix-Label =
    ?Label-Plhdr(_)

  prettyprint-Statix-Rule :
    Rule-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Rule")]
                       )
                     ]

  is-Statix-Rule =
    ?Rule-Plhdr(_)

  prettyprint-Statix-RelDecl :
    RelDecl-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$RelDecl")]
                          )
                        ]

  is-Statix-RelDecl =
    ?RelDecl-Plhdr(_)

  prettyprint-Statix-RelDecl :
    RelDecl-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-Statix-RelDecl =
    ?RelDecl-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix-Constraint :
    CTellRel(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ S("!")
                                      , t1__'
                                      , S("[")
                                      , t2__'
                                      , S("] in ")
                                      , t3__'
                                      ]
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-RelRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-CommaTerms) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Constraint =
    ?CTellRel(_, _, _)

  Statix-get-indent :
    ( t@CTellRel(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CTellRel(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CTellRel(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Statix-Constraint =
    fail

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-RelationId

  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-RelationId>
    where <?"RelationId"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-RelationId =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-RelationId :
    amb([h|hs]) -> <prettyprint-Statix-RelationId> h

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Signature

  prettyprint-Statix =
    prettyprint-Statix-ResolutionParam

  prettyprint-Statix =
    prettyprint-Statix-Label

  prettyprint-Statix =
    prettyprint-Statix-EdgeRef

  prettyprint-Statix =
    prettyprint-Statix-NsDecl

  prettyprint-Statix =
    prettyprint-Statix-Rule

  prettyprint-Statix =
    prettyprint-Statix-LabelPairs

  prettyprint-Statix =
    prettyprint-Statix-LabelPair

  prettyprint-Statix =
    prettyprint-Statix-LabelOrd

  prettyprint-Statix =
    prettyprint-Statix-LabelRE

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Signature>
    where <?"Signature"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-ResolutionParam>
    where <?"ResolutionParam"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Label>
    where <?"Label"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-EdgeRef>
    where <?"EdgeRef"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-NsDecl>
    where <?"NsDecl"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Rule>
    where <?"Rule"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-LabelPairs>
    where <?"LabelPairs"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-LabelPair>
    where <?"LabelPair"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-LabelOrd>
    where <?"LabelOrd"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-LabelRE>
    where <?"LabelRE"> sort

  prettyprint-Statix-Signature :
    Namespaces(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("namespaces")]
                          )
                        , t1__'
                        ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-NsDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?Namespaces(_)

  Statix-get-indent :
    (t@Namespaces(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Namespaces(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Namespaces(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Signature :
    NameResolution(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("name-resolution")]
                              )
                            , t1__'
                            ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-ResolutionParam) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?NameResolution(_)

  Statix-get-indent :
    (t@NameResolution(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NameResolution(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NameResolution(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ResolutionParam :
    Labels(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("labels "), t1__']
                      )
                    ]
    with t1__' := <pp-H-list(prettyprint-Statix-Label|" ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-ResolutionParam =
    ?Labels(_)

  Statix-get-indent :
    (t@Labels(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ResolutionParam"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Labels(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ResolutionParam"> sort
    with switch !index
           case ?1 :
             separator := " "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Labels(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ResolutionParam"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Label :
    Label(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Statix-RelationId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Label =
    ?Label(_)

  Statix-get-indent :
    (t@Label(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Label"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Label(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Label"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Label(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Label"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-EdgeRef :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-EdgeRef)
    where t1__' := <pp-one-Z(prettyprint-Statix-Label) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-EdgeRef :
    EOP() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("$")]
               )
             ]

  is-Statix-EdgeRef =
    ?EOP()

  Statix-get-indent :
    (t@EOP(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"EdgeRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@EOP(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"EdgeRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@EOP(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"EdgeRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-NsDecl :
    NsDecl(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" : "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-NamespaceId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-SortRef|" * ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-NsDecl =
    ?NsDecl(_, _)

  Statix-get-indent :
    (t@NsDecl(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NsDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NsDecl(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NsDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " * "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NsDecl(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NsDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Rule :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [S("namespace "), t1__']
              )
            ]
    where not(is-Statix-Rule)
    where t1__' := <pp-one-Z(prettyprint-Statix-NsDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-LabelPairs :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-LabelPairs)
    where t1__' := <pp-H-list(prettyprint-Statix-LabelPair|", ")
                    <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-LabelPair :
    LabelPair(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" < "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Statix-EdgeRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-EdgeRef) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-LabelPair =
    ?LabelPair(_, _)

  Statix-get-indent :
    (t@LabelPair(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelPair"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@LabelPair(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelPair"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@LabelPair(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelPair"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelOrd :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-LabelOrd)
    where t1__' := <pp-one-Z(prettyprint-Statix-LabelPairs) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-LabelRE :
    Empty() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("0")]
                 )
               ]

  is-Statix-LabelRE =
    ?Empty()

  Statix-get-indent :
    (t@Empty(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Empty(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Empty(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    Epsilon() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("e")]
                   )
                 ]

  is-Statix-LabelRE =
    ?Epsilon()

  Statix-get-indent :
    (t@Epsilon(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Epsilon(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Epsilon(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-LabelRE)
    where t1__' := <pp-one-Z(prettyprint-Statix-Label) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-LabelRE :
    Closure(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__', S("*")]
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-LabelRE =
    ?Closure(_)

  Statix-get-indent :
    (t@Closure(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Closure(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Closure(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    Neg(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("~"), t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-LabelRE =
    ?Neg(_)

  Statix-get-indent :
    (t@Neg(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Neg(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Neg(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    Concat(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-LabelRE =
    ?Concat(_, _)

  Statix-get-indent :
    (t@Concat(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Concat(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Concat(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    And(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" & "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-LabelRE =
    ?And(_, _)

  Statix-get-indent :
    (t@And(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@And(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@And(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    Or(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" | "), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-LabelRE =
    ?Or(_, _)

  Statix-get-indent :
    (t@Or(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Or(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Or(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LabelRE"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-LabelRE :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Signature =
    fail

  is-Statix-ResolutionParam =
    fail

  is-Statix-Label =
    fail

  is-Statix-EdgeRef =
    fail

  is-Statix-NsDecl =
    fail

  is-Statix-Rule =
    fail

  is-Statix-LabelPairs =
    fail

  is-Statix-LabelPair =
    fail

  is-Statix-LabelOrd =
    fail

  is-Statix-LabelRE =
    fail

  prettyprint-Statix-Signature :
    amb([h|hs]) -> <prettyprint-Statix-Signature> h

  prettyprint-Statix-ResolutionParam :
    amb([h|hs]) -> <prettyprint-Statix-ResolutionParam> h

  prettyprint-Statix-Label :
    amb([h|hs]) -> <prettyprint-Statix-Label> h

  prettyprint-Statix-EdgeRef :
    amb([h|hs]) -> <prettyprint-Statix-EdgeRef> h

  prettyprint-Statix-NsDecl :
    amb([h|hs]) -> <prettyprint-Statix-NsDecl> h

  prettyprint-Statix-Rule :
    amb([h|hs]) -> <prettyprint-Statix-Rule> h

  prettyprint-Statix-LabelPairs :
    amb([h|hs]) -> <prettyprint-Statix-LabelPairs> h

  prettyprint-Statix-LabelPair :
    amb([h|hs]) -> <prettyprint-Statix-LabelPair> h

  prettyprint-Statix-LabelOrd :
    amb([h|hs]) -> <prettyprint-Statix-LabelOrd> h

  prettyprint-Statix-LabelRE :
    amb([h|hs]) -> <prettyprint-Statix-LabelRE> h

  prettyprint-Statix-Signature :
    Signature-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Signature")]
                           )
                         ]

  is-Statix-Signature =
    ?Signature-Plhdr()

  prettyprint-Statix-ResolutionParam :
    ResolutionParam-Plhdr() -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$ResolutionParam")]
                                 )
                               ]

  is-Statix-ResolutionParam =
    ?ResolutionParam-Plhdr()

  prettyprint-Statix-RelationId :
    RelationId-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$RelationId")]
                            )
                          ]

  is-Statix-RelationId =
    ?RelationId-Plhdr()

  prettyprint-Statix-NamespaceId :
    NamespaceId-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$NamespaceId")]
                             )
                           ]

  is-Statix-NamespaceId =
    ?NamespaceId-Plhdr()

  prettyprint-Statix-SortRef :
    SortRef-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$SortRef")]
                         )
                       ]

  is-Statix-SortRef =
    ?SortRef-Plhdr()

  prettyprint-Statix-Rule :
    Rule-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Rule")]
                      )
                    ]

  is-Statix-Rule =
    ?Rule-Plhdr()

  prettyprint-Statix-NsDecl :
    NsDecl-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$NsDecl")]
                        )
                      ]

  is-Statix-NsDecl =
    ?NsDecl-Plhdr()

  prettyprint-Statix-LabelPair :
    LabelPair-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$LabelPair")]
                           )
                         ]

  is-Statix-LabelPair =
    ?LabelPair-Plhdr()

  prettyprint-Statix-EdgeRef :
    EdgeRef-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$EdgeRef")]
                         )
                       ]

  is-Statix-EdgeRef =
    ?EdgeRef-Plhdr()

  prettyprint-Statix-LabelOrd :
    LabelOrd-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$LabelOrd")]
                          )
                        ]

  is-Statix-LabelOrd =
    ?LabelOrd-Plhdr()

  prettyprint-Statix-LabelPairs :
    LabelPairs-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$LabelPairs")]
                            )
                          ]

  is-Statix-LabelPairs =
    ?LabelPairs-Plhdr()

  prettyprint-Statix-Label :
    Label-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Label")]
                       )
                     ]

  is-Statix-Label =
    ?Label-Plhdr()

  prettyprint-Statix-LabelRE :
    LabelRE-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$LabelRE")]
                         )
                       ]

  is-Statix-LabelRE =
    ?LabelRE-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Signature")]
                            )
                          ]

  is-Statix-Signature =
    ?Signature-Plhdr(_)

  prettyprint-Statix-ResolutionParam :
    ResolutionParam-Plhdr(_) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$ResolutionParam")]
                                  )
                                ]

  is-Statix-ResolutionParam =
    ?ResolutionParam-Plhdr(_)

  prettyprint-Statix-RelationId :
    RelationId-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$RelationId")]
                             )
                           ]

  is-Statix-RelationId =
    ?RelationId-Plhdr(_)

  prettyprint-Statix-NamespaceId :
    NamespaceId-Plhdr(_) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$NamespaceId")]
                              )
                            ]

  is-Statix-NamespaceId =
    ?NamespaceId-Plhdr(_)

  prettyprint-Statix-SortRef :
    SortRef-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$SortRef")]
                          )
                        ]

  is-Statix-SortRef =
    ?SortRef-Plhdr(_)

  prettyprint-Statix-Rule :
    Rule-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Rule")]
                       )
                     ]

  is-Statix-Rule =
    ?Rule-Plhdr(_)

  prettyprint-Statix-NsDecl :
    NsDecl-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$NsDecl")]
                         )
                       ]

  is-Statix-NsDecl =
    ?NsDecl-Plhdr(_)

  prettyprint-Statix-LabelPair :
    LabelPair-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$LabelPair")]
                            )
                          ]

  is-Statix-LabelPair =
    ?LabelPair-Plhdr(_)

  prettyprint-Statix-EdgeRef :
    EdgeRef-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$EdgeRef")]
                          )
                        ]

  is-Statix-EdgeRef =
    ?EdgeRef-Plhdr(_)

  prettyprint-Statix-LabelOrd :
    LabelOrd-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$LabelOrd")]
                           )
                         ]

  is-Statix-LabelOrd =
    ?LabelOrd-Plhdr(_)

  prettyprint-Statix-LabelPairs :
    LabelPairs-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$LabelPairs")]
                             )
                           ]

  is-Statix-LabelPairs =
    ?LabelPairs-Plhdr(_)

  prettyprint-Statix-Label :
    Label-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Label")]
                        )
                      ]

  is-Statix-Label =
    ?Label-Plhdr(_)

  prettyprint-Statix-LabelRE :
    LabelRE-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$LabelRE")]
                          )
                        ]

  is-Statix-LabelRE =
    ?LabelRE-Plhdr(_)

  prettyprint-Statix-NsDecl :
    NsDecl-Opt-Plhdr() -> [ H(
                              []
                            , [S("")]
                            )
                          ]

  is-Statix-NsDecl =
    ?NsDecl-Opt-Plhdr()

  prettyprint-Statix-ResolutionParam :
    ResolutionParam-Opt-Plhdr() -> [ H(
                                       []
                                     , [S("")]
                                     )
                                   ]

  is-Statix-ResolutionParam =
    ?ResolutionParam-Opt-Plhdr()

  prettyprint-Statix-Label :
    Label-Opt-Plhdr() -> [ H(
                             []
                           , [S("")]
                           )
                         ]

  is-Statix-Label =
    ?Label-Opt-Plhdr()

  prettyprint-Statix-SortRef :
    SortRef-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-Statix-SortRef =
    ?SortRef-Opt-Plhdr()

  prettyprint-Statix-LabelPair :
    LabelPair-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-Statix-LabelPair =
    ?LabelPair-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-Term

  prettyprint-Statix =
    prettyprint-Statix-Occurrence

  prettyprint-Statix =
    prettyprint-Statix-Path

  prettyprint-Statix =
    prettyprint-Statix-OccurrenceTerms

  prettyprint-Statix =
    prettyprint-Statix-OccurrenceTerm

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Term>
    where <?"Term"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Occurrence>
    where <?"Occurrence"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Path>
    where <?"Path"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OccurrenceTerms>
    where <?"OccurrenceTerms"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OccurrenceTerm>
    where <?"OccurrenceTerm"> sort

  prettyprint-Statix-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Term)
    where t1__' := <pp-one-Z(prettyprint-Statix-Occurrence) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Term)
    where t1__' := <pp-one-Z(prettyprint-Statix-Path) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Occurrence :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Occurrence)
    where t1__' := <pp-one-Z(prettyprint-Statix-OccurrenceLit) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Path :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Path)
    where t1__' := <pp-one-Z(prettyprint-Statix-PathLit) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-OccurrenceTerms :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-OccurrenceTerms)
    where t1__' := <pp-H-list(prettyprint-Statix-OccurrenceTerm|" ")
                    <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-OccurrenceTerm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-OccurrenceTerm)
    where t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Term =
    fail

  is-Statix-Occurrence =
    fail

  is-Statix-Path =
    fail

  is-Statix-OccurrenceTerms =
    fail

  is-Statix-OccurrenceTerm =
    fail

  prettyprint-Statix-Term :
    amb([h|hs]) -> <prettyprint-Statix-Term> h

  prettyprint-Statix-Occurrence :
    amb([h|hs]) -> <prettyprint-Statix-Occurrence> h

  prettyprint-Statix-Path :
    amb([h|hs]) -> <prettyprint-Statix-Path> h

  prettyprint-Statix-OccurrenceTerms :
    amb([h|hs]) -> <prettyprint-Statix-OccurrenceTerms> h

  prettyprint-Statix-OccurrenceTerm :
    amb([h|hs]) -> <prettyprint-Statix-OccurrenceTerm> h

  prettyprint-Statix-Occurrence :
    Occurrence-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Occurrence")]
                            )
                          ]

  is-Statix-Occurrence =
    ?Occurrence-Plhdr()

  prettyprint-Statix-OccurrenceLit :
    OccurrenceLit-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$OccurrenceLit")]
                               )
                             ]

  is-Statix-OccurrenceLit =
    ?OccurrenceLit-Plhdr()

  prettyprint-Statix-Path :
    Path-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Path")]
                      )
                    ]

  is-Statix-Path =
    ?Path-Plhdr()

  prettyprint-Statix-PathLit :
    PathLit-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$PathLit")]
                         )
                       ]

  is-Statix-PathLit =
    ?PathLit-Plhdr()

  prettyprint-Statix-OccurrenceTerms :
    OccurrenceTerms-Plhdr() -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$OccurrenceTerms")]
                                 )
                               ]

  is-Statix-OccurrenceTerms =
    ?OccurrenceTerms-Plhdr()

  prettyprint-Statix-OccurrenceTerm :
    OccurrenceTerm-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$OccurrenceTerm")]
                                )
                              ]

  is-Statix-OccurrenceTerm =
    ?OccurrenceTerm-Plhdr()

  prettyprint-Statix-Var :
    Var-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Var")]
                     )
                   ]

  is-Statix-Var =
    ?Var-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-Occurrence :
    Occurrence-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Occurrence")]
                             )
                           ]

  is-Statix-Occurrence =
    ?Occurrence-Plhdr(_)

  prettyprint-Statix-OccurrenceLit :
    OccurrenceLit-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$OccurrenceLit")]
                                )
                              ]

  is-Statix-OccurrenceLit =
    ?OccurrenceLit-Plhdr(_)

  prettyprint-Statix-Path :
    Path-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Path")]
                       )
                     ]

  is-Statix-Path =
    ?Path-Plhdr(_)

  prettyprint-Statix-PathLit :
    PathLit-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$PathLit")]
                          )
                        ]

  is-Statix-PathLit =
    ?PathLit-Plhdr(_)

  prettyprint-Statix-OccurrenceTerms :
    OccurrenceTerms-Plhdr(_) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$OccurrenceTerms")]
                                  )
                                ]

  is-Statix-OccurrenceTerms =
    ?OccurrenceTerms-Plhdr(_)

  prettyprint-Statix-OccurrenceTerm :
    OccurrenceTerm-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$OccurrenceTerm")]
                                 )
                               ]

  is-Statix-OccurrenceTerm =
    ?OccurrenceTerm-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Var")]
                      )
                    ]

  is-Statix-Var =
    ?Var-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-OccurrenceTerm :
    OccurrenceTerm-Opt-Plhdr() -> [ H(
                                      []
                                    , [S("")]
                                    )
                                  ]

  is-Statix-OccurrenceTerm =
    ?OccurrenceTerm-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-OccurrencePosition

  prettyprint-Statix =
    prettyprint-Statix-OccurrenceLit

  prettyprint-Statix =
    prettyprint-Statix-PathLit

  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OccurrencePosition>
    where <?"OccurrencePosition"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OccurrenceLit>
    where <?"OccurrenceLit"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-PathLit>
    where <?"PathLit"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix-OccurrencePosition :
    NoId() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-Statix-OccurrencePosition =
    ?NoId()

  Statix-get-indent :
    (t@NoId(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoId(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoId(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-OccurrencePosition :
    WithId(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("@"), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Statix-TermOrId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-OccurrencePosition =
    ?WithId(_)

  Statix-get-indent :
    (t@WithId(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@WithId(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@WithId(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-OccurrencePosition :
    NoId() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("@-")]
                )
              ]

  is-Statix-OccurrencePosition =
    ?NoId()

  Statix-get-indent :
    (t@NoId(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoId(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoId(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OccurrencePosition"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-OccurrenceLit :
    Occurrence(t1__, t2__, t3__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [ t1__'
                                        , S("{ ")
                                        , t2__'
                                        , S(" ")
                                        , t3__'
                                        , S(" }")
                                        ]
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Statix-NamespaceId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-OccurrenceTerms) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-OccurrencePosition) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-OccurrenceLit =
    ?Occurrence(_, _, _)

  Statix-get-indent :
    ( t@Occurrence(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"OccurrenceLit"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@Occurrence(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"OccurrenceLit"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@Occurrence(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"OccurrenceLit"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-PathLit :
    PathEmpty(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("_PathEmpty( ")
                           , t1__'
                           , S(" )")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-PathLit =
    ?PathEmpty(_)

  Statix-get-indent :
    (t@PathEmpty(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@PathEmpty(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@PathEmpty(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-PathLit :
    PathStep(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ S("_PathStep( ")
                                      , t1__'
                                      , S(" , ")
                                      , t2__'
                                      , S(" , ")
                                      , t3__'
                                      , S(" )")
                                      ]
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-PathLit =
    ?PathStep(_, _, _)

  Statix-get-indent :
    ( t@PathStep(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@PathStep(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@PathStep(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"PathLit"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Constraint :
    CTellEdge(t1__, t2__, t3__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ t1__'
                                       , S(" -")
                                       , t2__'
                                       , S("-> ")
                                       , t3__'
                                       ]
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Label) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Constraint =
    ?CTellEdge(_, _, _)

  Statix-get-indent :
    ( t@CTellEdge(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CTellEdge(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CTellEdge(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Statix-OccurrencePosition =
    fail

  is-Statix-OccurrenceLit =
    fail

  is-Statix-PathLit =
    fail

  is-Statix-Constraint =
    fail

  prettyprint-Statix-OccurrencePosition :
    amb([h|hs]) -> <prettyprint-Statix-OccurrencePosition> h

  prettyprint-Statix-OccurrenceLit :
    amb([h|hs]) -> <prettyprint-Statix-OccurrenceLit> h

  prettyprint-Statix-PathLit :
    amb([h|hs]) -> <prettyprint-Statix-PathLit> h

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-NamespaceId

  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-NamespaceId>
    where <?"NamespaceId"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-NamespaceId =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-NamespaceId :
    amb([h|hs]) -> <prettyprint-Statix-NamespaceId> h

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix =
    prettyprint-Statix-QueryTarget

  prettyprint-Statix =
    prettyprint-Statix-QueryFilter

  prettyprint-Statix =
    prettyprint-Statix-QueryMin

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-QueryTarget>
    where <?"QueryTarget"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-QueryFilter>
    where <?"QueryFilter"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-QueryMin>
    where <?"QueryMin"> sort

  prettyprint-Statix-Constraint :
    CResolveQuery(t1__, t2__, t3__, t4__, t5__, t6__) -> [ H(
                                                             [SOpt(HS(), "0")]
                                                           , [S("query "), t1__']
                                                           )
                                                         , t2__'
                                                         , t3__'
                                                         , t4__'
                                                         ]
    with t1__' := <pp-one-Z(prettyprint-Statix-QueryTarget) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-indent(|"1")> [ <pp-one-Z(prettyprint-Statix-QueryFilter) <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                    ]
    with t3__' := <pp-indent(|"1")> [ <pp-one-Z(prettyprint-Statix-QueryMin) <+ pp-one-Z(prettyprint-completion-aux)> t3__
                                    ]
    with t4__' := <pp-indent(|"2")> [ S("in ")
                                    , <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t4__
                                    , S(" |-> ")
                                    , <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t5__
                                    , <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t6__
                                    ]

  is-Statix-Constraint =
    ?CResolveQuery(_, _, _, _, _, _)

  Statix-get-indent :
    ( t@CResolveQuery(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := " "
           case ?3 :
             indent := " "
           case ?4 :
             indent := ""
           case ?5 :
             indent := ""
           case ?6 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CResolveQuery(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           case ?5 :
             separator := ""
           case ?6 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CResolveQuery(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := "\n "
           case ?3 :
             ws := "\n "
           case ?4 :
             ws := " "
           case ?5 :
             ws := " "
           case ?6 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-QueryTarget :
    EOP() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("()")]
               )
             ]

  is-Statix-QueryTarget =
    ?EOP()

  Statix-get-indent :
    (t@EOP(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"QueryTarget"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@EOP(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"QueryTarget"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@EOP(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"QueryTarget"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-QueryTarget :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-QueryTarget)
    where t1__' := <pp-one-Z(prettyprint-Statix-RelRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-QueryFilter :
    Filter(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S(" filter ")
                              , t1__'
                              , S(" and ")
                              , t2__'
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelRE) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-HoConstraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-QueryFilter =
    ?Filter(_, _)

  Statix-get-indent :
    (t@Filter(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"QueryFilter"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Filter(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"QueryFilter"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Filter(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"QueryFilter"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-QueryMin :
    Min(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S(" min ")
                           , t1__'
                           , S(" and ")
                           , t2__'
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-LabelOrd) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-HoConstraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-QueryMin =
    ?Min(_, _)

  Statix-get-indent :
    (t@Min(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"QueryMin"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Min(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"QueryMin"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Min(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"QueryMin"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Statix-Constraint =
    fail

  is-Statix-QueryTarget =
    fail

  is-Statix-QueryFilter =
    fail

  is-Statix-QueryMin =
    fail

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h

  prettyprint-Statix-QueryTarget :
    amb([h|hs]) -> <prettyprint-Statix-QueryTarget> h

  prettyprint-Statix-QueryFilter :
    amb([h|hs]) -> <prettyprint-Statix-QueryFilter> h

  prettyprint-Statix-QueryMin :
    amb([h|hs]) -> <prettyprint-Statix-QueryMin> h

  prettyprint-Statix-Constraint :
    Constraint-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Constraint")]
                            )
                          ]

  is-Statix-Constraint =
    ?Constraint-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-Message :
    Message-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Message")]
                         )
                       ]

  is-Statix-Message =
    ?Message-Plhdr()

  prettyprint-Statix-QueryTarget :
    QueryTarget-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$QueryTarget")]
                             )
                           ]

  is-Statix-QueryTarget =
    ?QueryTarget-Plhdr()

  prettyprint-Statix-RelRef :
    RelRef-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$RelRef")]
                        )
                      ]

  is-Statix-RelRef =
    ?RelRef-Plhdr()

  prettyprint-Statix-QueryFilter :
    QueryFilter-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$QueryFilter")]
                             )
                           ]

  is-Statix-QueryFilter =
    ?QueryFilter-Plhdr()

  prettyprint-Statix-LabelRE :
    LabelRE-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$LabelRE")]
                         )
                       ]

  is-Statix-LabelRE =
    ?LabelRE-Plhdr()

  prettyprint-Statix-QueryMin :
    QueryMin-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$QueryMin")]
                          )
                        ]

  is-Statix-QueryMin =
    ?QueryMin-Plhdr()

  prettyprint-Statix-LabelOrd :
    LabelOrd-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$LabelOrd")]
                          )
                        ]

  is-Statix-LabelOrd =
    ?LabelOrd-Plhdr()

  prettyprint-Statix-HoConstraint :
    HoConstraint-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$HoConstraint")]
                              )
                            ]

  is-Statix-HoConstraint =
    ?HoConstraint-Plhdr()

  prettyprint-Statix-Constraint :
    Constraint-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Constraint")]
                             )
                           ]

  is-Statix-Constraint =
    ?Constraint-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-Message :
    Message-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Message")]
                          )
                        ]

  is-Statix-Message =
    ?Message-Plhdr(_)

  prettyprint-Statix-QueryTarget :
    QueryTarget-Plhdr(_) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$QueryTarget")]
                              )
                            ]

  is-Statix-QueryTarget =
    ?QueryTarget-Plhdr(_)

  prettyprint-Statix-RelRef :
    RelRef-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$RelRef")]
                         )
                       ]

  is-Statix-RelRef =
    ?RelRef-Plhdr(_)

  prettyprint-Statix-QueryFilter :
    QueryFilter-Plhdr(_) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$QueryFilter")]
                              )
                            ]

  is-Statix-QueryFilter =
    ?QueryFilter-Plhdr(_)

  prettyprint-Statix-LabelRE :
    LabelRE-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$LabelRE")]
                          )
                        ]

  is-Statix-LabelRE =
    ?LabelRE-Plhdr(_)

  prettyprint-Statix-QueryMin :
    QueryMin-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$QueryMin")]
                           )
                         ]

  is-Statix-QueryMin =
    ?QueryMin-Plhdr(_)

  prettyprint-Statix-LabelOrd :
    LabelOrd-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$LabelOrd")]
                           )
                         ]

  is-Statix-LabelOrd =
    ?LabelOrd-Plhdr(_)

  prettyprint-Statix-HoConstraint :
    HoConstraint-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$HoConstraint")]
                               )
                             ]

  is-Statix-HoConstraint =
    ?HoConstraint-Plhdr(_)


strategies
  prettyprint-Statix =
    prettyprint-Statix-Keyword

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Keyword>
    where <?"Keyword"> sort

  prettyprint-Statix-Keyword =
    ![S(<is-string>)]

  prettyprint-Statix-Keyword :
    amb([h|hs]) -> <prettyprint-Statix-Keyword> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Signature

  prettyprint-Statix =
    prettyprint-Statix-SortDecl

  prettyprint-Statix =
    prettyprint-Statix-Sort

  prettyprint-Statix =
    prettyprint-Statix-SortRef

  prettyprint-Statix =
    prettyprint-Statix-OpDecl

  prettyprint-Statix =
    prettyprint-Statix-OpSort

  prettyprint-Statix =
    prettyprint-Statix-Type

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Signature>
    where <?"Signature"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-SortDecl>
    where <?"SortDecl"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Sort>
    where <?"Sort"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-SortRef>
    where <?"SortRef"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OpDecl>
    where <?"OpDecl"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OpSort>
    where <?"OpSort"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Type>
    where <?"Type"> sort

  prettyprint-Statix-Signature :
    Sorts(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("sorts")]
                     )
                   , t1__'
                   ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-SortDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?Sorts(_)

  Statix-get-indent :
    (t@Sorts(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Sorts(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Sorts(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Signature :
    Constructors(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("constructors")]
                            )
                          , t1__'
                          ]
    with t1__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-Statix-OpDecl) <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  is-Statix-Signature =
    ?Constructors(_)

  Statix-get-indent :
    (t@Constructors(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             indent := "  "
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Constructors(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Constructors(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Signature"> sort
    with switch !index
           case ?1 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortDecl :
    SortDecl(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-SortDecl =
    ?SortDecl(_)

  Statix-get-indent :
    (t@SortDecl(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@SortDecl(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@SortDecl(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortDecl :
    SortAlias(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" = "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-SortRef) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-SortDecl =
    ?SortAlias(_, _)

  Statix-get-indent :
    (t@SortAlias(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@SortAlias(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@SortAlias(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Sort :
    SimpleSort(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortId) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Sort =
    ?SimpleSort(_)

  Statix-get-indent :
    (t@SimpleSort(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Sort"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@SimpleSort(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Sort"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@SimpleSort(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Sort"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-SortRef)
    where t1__' := <pp-one-Z(prettyprint-Statix-Sort) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-SortRef :
    ListSort(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("list(")
                          , t1__'
                          , S(")")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-SortRef =
    ?ListSort(_)

  Statix-get-indent :
    (t@ListSort(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@ListSort(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@ListSort(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    Tuple0Sort() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("( )")]
                      )
                    ]

  is-Statix-SortRef =
    ?Tuple0Sort()

  Statix-get-indent :
    (t@Tuple0Sort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Tuple0Sort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Tuple0Sort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    TupleNSort(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ S("(")
                                  , t1__'
                                  , S(" * ")
                                  , t2__'
                                  , S(")")
                                  ]
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-SortRef|" * ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-SortRef =
    ?TupleNSort(_, _)

  Statix-get-indent :
    (t@TupleNSort(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@TupleNSort(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " * "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@TupleNSort(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    IntSort() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("int")]
                   )
                 ]

  is-Statix-SortRef =
    ?IntSort()

  Statix-get-indent :
    (t@IntSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@IntSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@IntSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    StringSort() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("string")]
                      )
                    ]

  is-Statix-SortRef =
    ?StringSort()

  Statix-get-indent :
    (t@StringSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@StringSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@StringSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    PathSort() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("path")]
                    )
                  ]

  is-Statix-SortRef =
    ?PathSort()

  Statix-get-indent :
    (t@PathSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@PathSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@PathSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    LabelSort() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("label")]
                     )
                   ]

  is-Statix-SortRef =
    ?LabelSort()

  Statix-get-indent :
    (t@LabelSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@LabelSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@LabelSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    OccurrenceSort() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("occurrence")]
                          )
                        ]

  is-Statix-SortRef =
    ?OccurrenceSort()

  Statix-get-indent :
    (t@OccurrenceSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@OccurrenceSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@OccurrenceSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    ScopeSort() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("scope")]
                     )
                   ]

  is-Statix-SortRef =
    ?ScopeSort()

  Statix-get-indent :
    (t@ScopeSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@ScopeSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@ScopeSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    AstIdSort() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("astId")]
                     )
                   ]

  is-Statix-SortRef =
    ?AstIdSort()

  Statix-get-indent :
    (t@AstIdSort(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@AstIdSort(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@AstIdSort(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SortRef"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-SortRef :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-SortRef) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-OpDecl :
    OpDecl(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__', S(" : "), t2__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-OpId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-OpSort) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-OpDecl =
    ?OpDecl(_, _)

  Statix-get-indent :
    (t@OpDecl(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OpDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@OpDecl(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OpDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@OpDecl(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OpDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-OpSort :
    ConstOp(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Sort) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-OpSort =
    ?ConstOp(_)

  Statix-get-indent :
    (t@ConstOp(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@ConstOp(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@ConstOp(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-OpSort :
    ArrowOp(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" -> "), t2__']
                             )
                           ]
    with t1__' := <pp-H-list(prettyprint-Statix-SortRef|" * ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Sort) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-OpSort =
    ?ArrowOp(_, _)

  Statix-get-indent :
    (t@ArrowOp(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@ArrowOp(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             separator := " * "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@ArrowOp(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"OpSort"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Type :
    SimpleType(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <pp-H-list(prettyprint-Statix-SortRef|" * ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Type =
    ?SimpleType(_)

  Statix-get-indent :
    (t@SimpleType(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@SimpleType(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             separator := " * "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@SimpleType(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-Statix-Signature =
    fail

  is-Statix-SortDecl =
    fail

  is-Statix-Sort =
    fail

  is-Statix-SortRef =
    fail

  is-Statix-OpDecl =
    fail

  is-Statix-OpSort =
    fail

  is-Statix-Type =
    fail

  prettyprint-Statix-Signature :
    amb([h|hs]) -> <prettyprint-Statix-Signature> h

  prettyprint-Statix-SortDecl :
    amb([h|hs]) -> <prettyprint-Statix-SortDecl> h

  prettyprint-Statix-Sort :
    amb([h|hs]) -> <prettyprint-Statix-Sort> h

  prettyprint-Statix-SortRef :
    amb([h|hs]) -> <prettyprint-Statix-SortRef> h

  prettyprint-Statix-OpDecl :
    amb([h|hs]) -> <prettyprint-Statix-OpDecl> h

  prettyprint-Statix-OpSort :
    amb([h|hs]) -> <prettyprint-Statix-OpSort> h

  prettyprint-Statix-Type :
    amb([h|hs]) -> <prettyprint-Statix-Type> h

  prettyprint-Statix-Signature :
    Signature-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Signature")]
                           )
                         ]

  is-Statix-Signature =
    ?Signature-Plhdr()

  prettyprint-Statix-SortDecl :
    SortDecl-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$SortDecl")]
                          )
                        ]

  is-Statix-SortDecl =
    ?SortDecl-Plhdr()

  prettyprint-Statix-SortId :
    SortId-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$SortId")]
                        )
                      ]

  is-Statix-SortId =
    ?SortId-Plhdr()

  prettyprint-Statix-OpDecl :
    OpDecl-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$OpDecl")]
                        )
                      ]

  is-Statix-OpDecl =
    ?OpDecl-Plhdr()

  prettyprint-Statix-OpId :
    OpId-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$OpId")]
                      )
                    ]

  is-Statix-OpId =
    ?OpId-Plhdr()

  prettyprint-Statix-OpSort :
    OpSort-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$OpSort")]
                        )
                      ]

  is-Statix-OpSort =
    ?OpSort-Plhdr()

  prettyprint-Statix-Sort :
    Sort-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Sort")]
                      )
                    ]

  is-Statix-Sort =
    ?Sort-Plhdr()

  prettyprint-Statix-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Type")]
                      )
                    ]

  is-Statix-Type =
    ?Type-Plhdr()

  prettyprint-Statix-SortRef :
    SortRef-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$SortRef")]
                         )
                       ]

  is-Statix-SortRef =
    ?SortRef-Plhdr()

  prettyprint-Statix-Signature :
    Signature-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Signature")]
                            )
                          ]

  is-Statix-Signature =
    ?Signature-Plhdr(_)

  prettyprint-Statix-SortDecl :
    SortDecl-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$SortDecl")]
                           )
                         ]

  is-Statix-SortDecl =
    ?SortDecl-Plhdr(_)

  prettyprint-Statix-SortId :
    SortId-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$SortId")]
                         )
                       ]

  is-Statix-SortId =
    ?SortId-Plhdr(_)

  prettyprint-Statix-OpDecl :
    OpDecl-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$OpDecl")]
                         )
                       ]

  is-Statix-OpDecl =
    ?OpDecl-Plhdr(_)

  prettyprint-Statix-OpId :
    OpId-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$OpId")]
                       )
                     ]

  is-Statix-OpId =
    ?OpId-Plhdr(_)

  prettyprint-Statix-OpSort :
    OpSort-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$OpSort")]
                         )
                       ]

  is-Statix-OpSort =
    ?OpSort-Plhdr(_)

  prettyprint-Statix-Sort :
    Sort-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Sort")]
                       )
                     ]

  is-Statix-Sort =
    ?Sort-Plhdr(_)

  prettyprint-Statix-Type :
    Type-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Type")]
                       )
                     ]

  is-Statix-Type =
    ?Type-Plhdr(_)

  prettyprint-Statix-SortRef :
    SortRef-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$SortRef")]
                          )
                        ]

  is-Statix-SortRef =
    ?SortRef-Plhdr(_)

  prettyprint-Statix-SortDecl :
    SortDecl-Opt-Plhdr() -> [ H(
                                []
                              , [S("")]
                              )
                            ]

  is-Statix-SortDecl =
    ?SortDecl-Opt-Plhdr()

  prettyprint-Statix-OpDecl :
    OpDecl-Opt-Plhdr() -> [ H(
                              []
                            , [S("")]
                            )
                          ]

  is-Statix-OpDecl =
    ?OpDecl-Opt-Plhdr()

  prettyprint-Statix-SortRef :
    SortRef-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-Statix-SortRef =
    ?SortRef-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-SortId

  prettyprint-Statix =
    prettyprint-Statix-OpId

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-SortId>
    where <?"SortId"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-OpId>
    where <?"OpId"> sort

  prettyprint-Statix-SortId =
    ![S(<is-string>)]

  prettyprint-Statix-OpId =
    ![S(<is-string>)]

  prettyprint-Statix-SortId :
    amb([h|hs]) -> <prettyprint-Statix-SortId> h

  prettyprint-Statix-OpId :
    amb([h|hs]) -> <prettyprint-Statix-OpId> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Var

  prettyprint-Statix =
    prettyprint-Statix-Int

  prettyprint-Statix =
    prettyprint-Statix-Term

  prettyprint-Statix =
    prettyprint-Statix-CommaTerms

  prettyprint-Statix =
    prettyprint-Statix-SpaceTerms

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Var>
    where <?"Var"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Int>
    where <?"Int"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Term>
    where <?"Term"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-CommaTerms>
    where <?"CommaTerms"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-SpaceTerms>
    where <?"SpaceTerms"> sort

  prettyprint-Statix-Var :
    Var(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Statix-VARID) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Var =
    ?Var(_)

  Statix-get-indent :
    (t@Var(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Var(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Var(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Var :
    Wld() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("_")]
               )
             ]

  is-Statix-Var =
    ?Wld()

  Statix-get-indent :
    (t@Wld(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Wld(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Wld(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Var"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Int :
    Int(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__']
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Statix-INT) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Int =
    ?Int(_)

  Statix-get-indent :
    (t@Int(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Int"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Int(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Int"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Int(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Int"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Term)
    where t1__' := <pp-one-Z(prettyprint-Statix-Var) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Term)
    where t1__' := <pp-one-Z(prettyprint-Statix-Int) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Term :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-Term)
    where t1__' := <pp-one-Z(prettyprint-Statix-Str) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-Term :
    List(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Term =
    ?List(_)

  Statix-get-indent :
    (t@List(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@List(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ", "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@List(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    ListTail(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[")
                                , t1__'
                                , S("|")
                                , t2__'
                                , S("]")
                                ]
                              )
                            ]
    with t1__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Term =
    ?ListTail(_, _)

  Statix-get-indent :
    (t@ListTail(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@ListTail(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ", "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@ListTail(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    Tuple0() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("( )")]
                  )
                ]

  is-Statix-Term =
    ?Tuple0()

  Statix-get-indent :
    (t@Tuple0(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Tuple0(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Tuple0(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    TupleN(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("(")
                              , t1__'
                              , S(", ")
                              , t2__'
                              , S(")")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-Term|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Term =
    ?TupleN(_, _)

  Statix-get-indent :
    (t@TupleN(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@TupleN(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ", "
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@TupleN(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    As(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S("@"), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Var) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Term =
    ?As(_, _)

  Statix-get-indent :
    (t@As(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@As(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@As(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    Ascribe(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__', S(" : "), t2__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-SortRef) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Term =
    ?Ascribe(_, _)

  Statix-get-indent :
    (t@Ascribe(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Ascribe(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Ascribe(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Term :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-CommaTerms :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-CommaTerms)
    where t1__' := <pp-H-list(prettyprint-Statix-Term|", ")
                    <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-SpaceTerms :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-SpaceTerms)
    where t1__' := <pp-H-list(prettyprint-Statix-Term|" ")
                    <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Var =
    fail

  is-Statix-Int =
    fail

  is-Statix-Term =
    fail

  is-Statix-CommaTerms =
    fail

  is-Statix-SpaceTerms =
    fail

  prettyprint-Statix-Var :
    amb([h|hs]) -> <prettyprint-Statix-Var> h

  prettyprint-Statix-Int :
    amb([h|hs]) -> <prettyprint-Statix-Int> h

  prettyprint-Statix-Term :
    amb([h|hs]) -> <prettyprint-Statix-Term> h

  prettyprint-Statix-CommaTerms :
    amb([h|hs]) -> <prettyprint-Statix-CommaTerms> h

  prettyprint-Statix-SpaceTerms :
    amb([h|hs]) -> <prettyprint-Statix-SpaceTerms> h

  prettyprint-Statix-VARID :
    VARID-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$VARID")]
                       )
                     ]

  is-Statix-VARID =
    ?VARID-Plhdr()

  prettyprint-Statix-INT :
    INT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$INT")]
                     )
                   ]

  is-Statix-INT =
    ?INT-Plhdr()

  prettyprint-Statix-Int :
    Int-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Int")]
                     )
                   ]

  is-Statix-Int =
    ?Int-Plhdr()

  prettyprint-Statix-Str :
    Str-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Str")]
                     )
                   ]

  is-Statix-Str =
    ?Str-Plhdr()

  prettyprint-Statix-Var :
    Var-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Var")]
                     )
                   ]

  is-Statix-Var =
    ?Var-Plhdr()

  prettyprint-Statix-SortRef :
    SortRef-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$SortRef")]
                         )
                       ]

  is-Statix-SortRef =
    ?SortRef-Plhdr()

  prettyprint-Statix-CommaTerms :
    CommaTerms-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$CommaTerms")]
                            )
                          ]

  is-Statix-CommaTerms =
    ?CommaTerms-Plhdr()

  prettyprint-Statix-SpaceTerms :
    SpaceTerms-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$SpaceTerms")]
                            )
                          ]

  is-Statix-SpaceTerms =
    ?SpaceTerms-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-VARID :
    VARID-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$VARID")]
                        )
                      ]

  is-Statix-VARID =
    ?VARID-Plhdr(_)

  prettyprint-Statix-INT :
    INT-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$INT")]
                      )
                    ]

  is-Statix-INT =
    ?INT-Plhdr(_)

  prettyprint-Statix-Int :
    Int-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Int")]
                      )
                    ]

  is-Statix-Int =
    ?Int-Plhdr(_)

  prettyprint-Statix-Str :
    Str-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Str")]
                      )
                    ]

  is-Statix-Str =
    ?Str-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Var")]
                      )
                    ]

  is-Statix-Var =
    ?Var-Plhdr(_)

  prettyprint-Statix-SortRef :
    SortRef-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$SortRef")]
                          )
                        ]

  is-Statix-SortRef =
    ?SortRef-Plhdr(_)

  prettyprint-Statix-CommaTerms :
    CommaTerms-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$CommaTerms")]
                             )
                           ]

  is-Statix-CommaTerms =
    ?CommaTerms-Plhdr(_)

  prettyprint-Statix-SpaceTerms :
    SpaceTerms-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$SpaceTerms")]
                             )
                           ]

  is-Statix-SpaceTerms =
    ?SpaceTerms-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Opt-Plhdr() -> [ H(
                            []
                          , [S("")]
                          )
                        ]

  is-Statix-Term =
    ?Term-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-Term

  prettyprint-Statix =
    prettyprint-Statix-Str

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Term>
    where <?"Term"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Str>
    where <?"Str"> sort

  prettyprint-Statix-Term :
    Op(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ t1__'
                          , S("( ")
                          , t2__'
                          , S(" )")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-OpId) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-CommaTerms) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-Term =
    ?Op(_, _)

  Statix-get-indent :
    (t@Op(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Op(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Op(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Term"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Str :
    Str(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [ S("\"")
                     , t1__'
                     , S("\"")
                     ]
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Statix-StrChars) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-Str =
    ?Str(_)

  Statix-get-indent :
    (t@Str(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Str"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Str(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Str"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Str(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Str"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-Statix-Term =
    fail

  is-Statix-Str =
    fail

  prettyprint-Statix-Term :
    amb([h|hs]) -> <prettyprint-Statix-Term> h

  prettyprint-Statix-Str :
    amb([h|hs]) -> <prettyprint-Statix-Str> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-StrChars

  prettyprint-Statix =
    prettyprint-Statix-StrChar

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-StrChars>
    where <?"StrChars"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-StrChar>
    where <?"StrChar"> sort

  prettyprint-Statix-StrChars =
    ![S(<is-string>)]

  prettyprint-Statix-StrChar =
    ![S(<is-string>)]

  prettyprint-Statix-StrChars :
    amb([h|hs]) -> <prettyprint-Statix-StrChars> h

  prettyprint-Statix-StrChar :
    amb([h|hs]) -> <prettyprint-Statix-StrChar> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-Constraint

  prettyprint-Statix =
    prettyprint-Statix-ArithOp

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Constraint>
    where <?"Constraint"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-ArithOp>
    where <?"ArithOp"> sort

  prettyprint-Statix-Constraint :
    CArith(t1__, t2__, t3__, t4__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [ t1__'
                                          , S(" #")
                                          , t2__'
                                          , S(" ")
                                          , t3__'
                                          , S(" ")
                                          , t4__'
                                          ]
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithOp) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t3__
    with t4__' := <pp-one-Z(prettyprint-Statix-Message) <+ pp-one-Z(prettyprint-completion-aux)> t4__

  is-Statix-Constraint =
    ?CArith(_, _, _, _)

  Statix-get-indent :
    ( t@CArith(t1__, t2__, t3__, t4__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@CArith(t1__, t2__, t3__, t4__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@CArith(t1__, t2__, t3__, t4__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    Equal() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("=")]
                 )
               ]

  is-Statix-ArithOp =
    ?Equal()

  Statix-get-indent :
    (t@Equal(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Equal(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Equal(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    NotEqual() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("\\=")]
                    )
                  ]

  is-Statix-ArithOp =
    ?NotEqual()

  Statix-get-indent :
    (t@NotEqual(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NotEqual(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NotEqual(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    GreaterThanEqual() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S(">=")]
                            )
                          ]

  is-Statix-ArithOp =
    ?GreaterThanEqual()

  Statix-get-indent :
    (t@GreaterThanEqual(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@GreaterThanEqual(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@GreaterThanEqual(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    LessThanEqual() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("=<")]
                         )
                       ]

  is-Statix-ArithOp =
    ?LessThanEqual()

  Statix-get-indent :
    (t@LessThanEqual(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@LessThanEqual(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@LessThanEqual(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    GreaterThan() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S(">")]
                       )
                     ]

  is-Statix-ArithOp =
    ?GreaterThan()

  Statix-get-indent :
    (t@GreaterThan(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@GreaterThan(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@GreaterThan(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithOp :
    LessThan() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("<")]
                    )
                  ]

  is-Statix-ArithOp =
    ?LessThan()

  Statix-get-indent :
    (t@LessThan(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@LessThan(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@LessThan(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithOp"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  is-Statix-Constraint =
    fail

  is-Statix-ArithOp =
    fail

  prettyprint-Statix-Constraint :
    amb([h|hs]) -> <prettyprint-Statix-Constraint> h

  prettyprint-Statix-ArithOp :
    amb([h|hs]) -> <prettyprint-Statix-ArithOp> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-ArithExp

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-ArithExp>
    where <?"ArithExp"> sort

  prettyprint-Statix-ArithExp :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-ArithExp)
    where t1__' := <pp-one-Z(prettyprint-Statix-Int) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-ArithExp :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-ArithExp)
    where t1__' := <pp-one-Z(prettyprint-Statix-Var) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-ArithExp :
    Add(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" + "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Add(_, _)

  Statix-get-indent :
    (t@Add(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Add(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Add(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Mul(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" * "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Mul(_, _)

  Statix-get-indent :
    (t@Mul(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Mul(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Mul(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Sub(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" - "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Sub(_, _)

  Statix-get-indent :
    (t@Sub(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Sub(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Sub(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Min(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("min(")
                           , t1__'
                           , S(", ")
                           , t2__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Min(_, _)

  Statix-get-indent :
    (t@Min(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Min(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Min(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Max(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("max(")
                           , t1__'
                           , S(", ")
                           , t2__'
                           , S(")")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Max(_, _)

  Statix-get-indent :
    (t@Max(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Max(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Max(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Mod(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" mod "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Mod(_, _)

  Statix-get-indent :
    (t@Mod(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Mod(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Mod(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Div(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__', S(" div "), t2__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Statix-ArithExp =
    ?Div(_, _)

  Statix-get-indent :
    (t@Div(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Div(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Div(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArithExp"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-ArithExp :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("(")
                               , t1__'
                               , S(")")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Statix-ArithExp) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-ArithExp =
    fail

  prettyprint-Statix-ArithExp :
    amb([h|hs]) -> <prettyprint-Statix-ArithExp> h

  prettyprint-Statix-Int :
    Int-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Int")]
                     )
                   ]

  is-Statix-Int =
    ?Int-Plhdr()

  prettyprint-Statix-Var :
    Var-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Var")]
                     )
                   ]

  is-Statix-Var =
    ?Var-Plhdr()

  prettyprint-Statix-ArithExp :
    ArithExp-Plhdr() -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$ArithExp")]
                          )
                        ]

  is-Statix-ArithExp =
    ?ArithExp-Plhdr()

  prettyprint-Statix-Int :
    Int-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Int")]
                      )
                    ]

  is-Statix-Int =
    ?Int-Plhdr(_)

  prettyprint-Statix-Var :
    Var-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Var")]
                      )
                    ]

  is-Statix-Var =
    ?Var-Plhdr(_)

  prettyprint-Statix-ArithExp :
    ArithExp-Plhdr(_) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$ArithExp")]
                           )
                         ]

  is-Statix-ArithExp =
    ?ArithExp-Plhdr(_)


strategies
  prettyprint-Statix =
    prettyprint-Statix-Message

  prettyprint-Statix =
    prettyprint-Statix-MessageKind

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-Message>
    where <?"Message"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageKind>
    where <?"MessageKind"> sort

  prettyprint-Statix-Message :
    NoMessage() -> [ H(
                       []
                     , [S("")]
                     )
                   ]

  is-Statix-Message =
    ?NoMessage()

  Statix-get-indent :
    (t@NoMessage(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoMessage(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoMessage(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-Message :
    Message(t1__, t2__, t3__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ S(" | ")
                                     , t1__'
                                     , S(" ")
                                     , t2__'
                                     , S(" ")
                                     , t3__'
                                     ]
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-Statix-MessageKind) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Statix-MessageContent) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Statix-MessageOrigin) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Statix-Message =
    ?Message(_, _, _)

  Statix-get-indent :
    ( t@Message(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    ( t@Message(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    ( t@Message(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"Message"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageKind :
    Error() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("error")]
                 )
               ]

  is-Statix-MessageKind =
    ?Error()

  Statix-get-indent :
    (t@Error(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Error(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Error(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageKind :
    Warning() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("warning")]
                   )
                 ]

  is-Statix-MessageKind =
    ?Warning()

  Statix-get-indent :
    (t@Warning(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Warning(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Warning(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageKind :
    Note() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("note")]
                )
              ]

  is-Statix-MessageKind =
    ?Note()

  Statix-get-indent :
    (t@Note(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Note(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Note(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageKind"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  is-Statix-Message =
    fail

  is-Statix-MessageKind =
    fail

  prettyprint-Statix-Message :
    amb([h|hs]) -> <prettyprint-Statix-Message> h

  prettyprint-Statix-MessageKind :
    amb([h|hs]) -> <prettyprint-Statix-MessageKind> h

  prettyprint-Statix-Message :
    Message-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Message")]
                         )
                       ]

  is-Statix-Message =
    ?Message-Plhdr()

  prettyprint-Statix-MessageContent :
    MessageContent-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$MessageContent")]
                                )
                              ]

  is-Statix-MessageContent =
    ?MessageContent-Plhdr()

  prettyprint-Statix-MessageOrigin :
    MessageOrigin-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$MessageOrigin")]
                               )
                             ]

  is-Statix-MessageOrigin =
    ?MessageOrigin-Plhdr()

  prettyprint-Statix-MessageKind :
    MessageKind-Plhdr() -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$MessageKind")]
                             )
                           ]

  is-Statix-MessageKind =
    ?MessageKind-Plhdr()

  prettyprint-Statix-Message :
    Message-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Message")]
                          )
                        ]

  is-Statix-Message =
    ?Message-Plhdr(_)

  prettyprint-Statix-MessageContent :
    MessageContent-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$MessageContent")]
                                 )
                               ]

  is-Statix-MessageContent =
    ?MessageContent-Plhdr(_)

  prettyprint-Statix-MessageOrigin :
    MessageOrigin-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$MessageOrigin")]
                                )
                              ]

  is-Statix-MessageOrigin =
    ?MessageOrigin-Plhdr(_)

  prettyprint-Statix-MessageKind :
    MessageKind-Plhdr(_) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$MessageKind")]
                              )
                            ]

  is-Statix-MessageKind =
    ?MessageKind-Plhdr(_)

  prettyprint-Statix-Message :
    Message-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-Statix-Message =
    ?Message-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-MessageContent

  prettyprint-Statix =
    prettyprint-Statix-MessageOrigin

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageContent>
    where <?"MessageContent"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageOrigin>
    where <?"MessageOrigin"> sort

  prettyprint-Statix-MessageContent :
    Formatted(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("$[")
                           , t1__'
                           , S("]")
                           ]
                         )
                       ]
    with t1__' := <pp-H-list(prettyprint-Statix-MessageContentPart|"")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-MessageContent =
    ?Formatted(_)

  Statix-get-indent :
    (t@Formatted(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Formatted(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Formatted(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageOrigin :
    NoOrigin() -> [ H(
                      []
                    , [S("")]
                    )
                  ]

  is-Statix-MessageOrigin =
    ?NoOrigin()

  Statix-get-indent :
    (t@NoOrigin(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoOrigin(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoOrigin(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageOrigin :
    Origin(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("@"), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Var) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-MessageOrigin =
    ?Origin(_)

  Statix-get-indent :
    (t@Origin(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Origin(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Origin(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageOrigin"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-Statix-MessageContent =
    fail

  is-Statix-MessageOrigin =
    fail

  prettyprint-Statix-MessageContent :
    amb([h|hs]) -> <prettyprint-Statix-MessageContent> h

  prettyprint-Statix-MessageOrigin :
    amb([h|hs]) -> <prettyprint-Statix-MessageOrigin> h


strategies
  prettyprint-Statix =
    prettyprint-Statix-MessageContent

  prettyprint-Statix =
    prettyprint-Statix-MessageContentPart

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageContent>
    where <?"MessageContent"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageContentPart>
    where <?"MessageContentPart"> sort

  prettyprint-Statix-MessageContent :
    NoMessage() -> [ H(
                       []
                     , [S("")]
                     )
                   ]

  is-Statix-MessageContent =
    ?NoMessage()

  Statix-get-indent :
    (t@NoMessage(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@NoMessage(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@NoMessage(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageContent"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Statix-MessageContent)
    where t1__' := <pp-one-Z(prettyprint-Statix-Str) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Statix-MessageContentPart :
    Term(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("[")
                      , t1__'
                      , S("]")
                      ]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-Term) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-MessageContentPart =
    ?Term(_)

  Statix-get-indent :
    (t@Term(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Term(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Term(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Statix-MessageContentPart :
    Text(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Statix-MessageChars) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Statix-MessageContentPart =
    ?Text(_)

  Statix-get-indent :
    (t@Text(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Statix-get-separator :
    (t@Text(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Statix-get-leading-ws :
    (t@Text(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageContentPart"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-Statix-MessageContent =
    fail

  is-Statix-MessageContentPart =
    fail

  prettyprint-Statix-MessageContent :
    amb([h|hs]) -> <prettyprint-Statix-MessageContent> h

  prettyprint-Statix-MessageContentPart :
    amb([h|hs]) -> <prettyprint-Statix-MessageContentPart> h

  prettyprint-Statix-MessageContent :
    MessageContent-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$MessageContent")]
                                )
                              ]

  is-Statix-MessageContent =
    ?MessageContent-Plhdr()

  prettyprint-Statix-Str :
    Str-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Str")]
                     )
                   ]

  is-Statix-Str =
    ?Str-Plhdr()

  prettyprint-Statix-Term :
    Term-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Term")]
                      )
                    ]

  is-Statix-Term =
    ?Term-Plhdr()

  prettyprint-Statix-MessageContentPart :
    MessageContentPart-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$MessageContentPart")]
                                    )
                                  ]

  is-Statix-MessageContentPart =
    ?MessageContentPart-Plhdr()

  prettyprint-Statix-MessageChars :
    MessageChars-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$MessageChars")]
                              )
                            ]

  is-Statix-MessageChars =
    ?MessageChars-Plhdr()

  prettyprint-Statix-MessageContent :
    MessageContent-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$MessageContent")]
                                 )
                               ]

  is-Statix-MessageContent =
    ?MessageContent-Plhdr(_)

  prettyprint-Statix-Str :
    Str-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Str")]
                      )
                    ]

  is-Statix-Str =
    ?Str-Plhdr(_)

  prettyprint-Statix-Term :
    Term-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Term")]
                       )
                     ]

  is-Statix-Term =
    ?Term-Plhdr(_)

  prettyprint-Statix-MessageContentPart :
    MessageContentPart-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$MessageContentPart")]
                                     )
                                   ]

  is-Statix-MessageContentPart =
    ?MessageContentPart-Plhdr(_)

  prettyprint-Statix-MessageChars :
    MessageChars-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$MessageChars")]
                               )
                             ]

  is-Statix-MessageChars =
    ?MessageChars-Plhdr(_)

  prettyprint-Statix-MessageContent :
    MessageContent-Opt-Plhdr() -> [ H(
                                      []
                                    , [S("")]
                                    )
                                  ]

  is-Statix-MessageContent =
    ?MessageContent-Opt-Plhdr()


strategies
  prettyprint-Statix =
    prettyprint-Statix-MessageChars

  prettyprint-Statix =
    prettyprint-Statix-MessageChar

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageChars>
    where <?"MessageChars"> sort

  prettyprint-Statix(|sort):
    t -> <prettyprint-Statix-MessageChar>
    where <?"MessageChar"> sort

  prettyprint-Statix-MessageChars =
    ![S(<is-string>)]

  prettyprint-Statix-MessageChar =
    ![S(<is-string>)]

  prettyprint-Statix-MessageChars :
    amb([h|hs]) -> <prettyprint-Statix-MessageChars> h

  prettyprint-Statix-MessageChar :
    amb([h|hs]) -> <prettyprint-Statix-MessageChar> h